import React, { useState } from 'react'
import { BookOpen, ChevronRight, Clock, Star, Search, Filter, User, Target, Award, TrendingUp } from 'lucide-react'
import { studyModules, studyChapters, getModuleById, getChaptersByModule, searchStudyContent, getStudyStats } from '../data/studyModules'

const Notes: React.FC = () => {
  const [selectedModule, setSelectedModule] = useState<number | null>(null)
  const [selectedChapter, setSelectedChapter] = useState<number | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [difficultyFilter, setDifficultyFilter] = useState<'All' | 'Beginner' | 'Intermediate' | 'Advanced'>('All')

  const stats = getStudyStats()

  const filteredModules = studyModules.filter(module => {
    const matchesSearch = searchTerm === '' || 
      module.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      module.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      module.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    
    const matchesDifficulty = difficultyFilter === 'All' || module.difficulty === difficultyFilter
    
    return matchesSearch && matchesDifficulty
  })

  const getProgressColor = (progress: number) => {
    if (progress >= 80) return 'bg-green-500'
    if (progress >= 60) return 'bg-blue-500'
    if (progress >= 40) return 'bg-yellow-500'
    if (progress >= 20) return 'bg-orange-500'
    return 'bg-gray-400'
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'bg-green-100 text-green-800'
      case 'Intermediate': return 'bg-yellow-100 text-yellow-800'  
      case 'Advanced': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const selectedChapterData = selectedChapter ? studyChapters.find(chapter => chapter.id === selectedChapter) : null

  if (selectedChapterData) {
    return (
      <div className="p-4 max-w-4xl mx-auto">
        <div className="mb-4">
          <button
            onClick={() => setSelectedChapter(null)}
            className="text-blue-600 hover:text-blue-800 flex items-center"
          >
            ← Back to Modules
          </button>
        </div>

        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold">{selectedChapterData.title}</h1>
                <p className="text-blue-100">Module {selectedChapterData.moduleId}: {getModuleById(selectedChapterData.moduleId)?.title}</p>
                <div className="flex items-center space-x-2 mt-2">
                  <span className={`px-2 py-1 rounded text-xs font-medium ${getDifficultyColor(selectedChapterData.difficulty)}`}>
                    {selectedChapterData.difficulty}
                  </span>
                  <span className="text-blue-100 text-sm">{selectedChapterData.estimatedTime}</span>
                </div>
              </div>
              <BookOpen className="h-12 w-12 text-blue-200" />
            </div>
          </div>

          <div className="p-6 space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <Target className="h-4 w-4 mr-2 text-blue-600" />
                  Learning Objectives
                </h3>
                <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                  {selectedChapterData.objectives.map((objective, index) => (
                    <li key={index}>{objective}</li>
                  ))}
                </ul>
              </div>

              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <Award className="h-4 w-4 mr-2 text-green-600" />
                  Key Points
                </h3>
                <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                  {selectedChapterData.keyPoints.map((point, index) => (
                    <li key={index}>{point}</li>
                  ))}
                </ul>
              </div>
            </div>

            <div>
              <h3 className="font-semibold text-gray-900 mb-3">Chapter Content</h3>
              <div className="prose prose-sm max-w-none">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <pre className="whitespace-pre-wrap text-sm text-gray-700 font-sans">
                    {selectedChapterData.content}
                  </pre>
                </div>
              </div>
            </div>

            {selectedChapterData.tags.length > 0 && (
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">Tags</h3>
                <div className="flex flex-wrap gap-2">
                  {selectedChapterData.tags.map((tag, index) => (
                    <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-4 max-w-6xl mx-auto">
      <div className="mb-6">
        <h2 className="text-2xl font-bold mb-2 flex items-center">
          <BookOpen className="mr-2 h-6 w-6 text-blue-600" />
          EMT Study Notes
        </h2>
        <p className="text-gray-600">Comprehensive EMT training content across {stats.totalModules} modules and {stats.totalChapters} chapters</p>
      </div>

      <div className="mb-6 grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-white p-4 rounded-lg shadow-md text-center">
          <div className="text-2xl font-bold text-blue-600">{stats.totalModules}</div>
          <div className="text-sm text-gray-600">Total Modules</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md text-center">
          <div className="text-2xl font-bold text-green-600">{stats.completedModules}</div>
          <div className="text-sm text-gray-600">Completed</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md text-center">
          <div className="text-2xl font-bold text-yellow-600">{stats.inProgressModules}</div>
          <div className="text-sm text-gray-600">In Progress</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md text-center">
          <div className="text-2xl font-bold text-purple-600">{stats.averageProgress}%</div>
          <div className="text-sm text-gray-600">Avg Progress</div>
        </div>
      </div>

      <div className="mb-6 flex flex-col md:flex-row gap-4">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search modules and chapters..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div className="flex items-center space-x-2">
          <Filter className="h-4 w-4 text-gray-500" />
          <select
            value={difficultyFilter}
            onChange={(e) => setDifficultyFilter(e.target.value as any)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="All">All Difficulties</option>
            <option value="Beginner">Beginner</option>
            <option value="Intermediate">Intermediate</option>
            <option value="Advanced">Advanced</option>
          </select>
        </div>
      </div>

      <div className="space-y-4">
        {filteredModules.map((module) => {
          const moduleChapters = getChaptersByModule(module.id)
          
          return (
            <div key={module.id} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div 
                className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => setSelectedModule(selectedModule === module.id ? null : module.id)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center mb-2">
                      <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded mr-3">
                        Module {module.id}
                      </span>
                      <h3 className="font-semibold text-gray-900">{module.title}</h3>
                      <span className={`ml-2 px-2 py-1 text-xs font-medium rounded ${getDifficultyColor(module.difficulty)}`}>
                        {module.difficulty}
                      </span>
                      {module.progress > 80 && (
                        <Star className="ml-2 h-4 w-4 text-yellow-500 fill-current" />
                      )}
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-3">{module.description}</p>
                    
                    <div className="flex items-center space-x-6 text-xs text-gray-500">
                      <div className="flex items-center">
                        <BookOpen className="h-3 w-3 mr-1" />
                        <span>{module.totalChapters} chapters</span>
                      </div>
                      <div className="flex items-center">
                        <Clock className="h-3 w-3 mr-1" />
                        <span>{module.estimatedHours} hours</span>
                      </div>
                      <div className="flex items-center">
                        <TrendingUp className="h-3 w-3 mr-1" />
                        <span>{module.progress}% complete</span>
                      </div>
                    </div>
                    
                    <div className="mt-3">
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-gray-600">Progress</span>
                        <span className="text-gray-600">{module.progress}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(module.progress)}`}
                          style={{ width: `${module.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                  
                  <ChevronRight 
                    className={`h-5 w-5 text-gray-400 transition-transform duration-200 ${
                      selectedModule === module.id ? 'transform rotate-90' : ''
                    }`} 
                  />
                </div>
              </div>
              
              {selectedModule === module.id && (
                <div className="border-t border-gray-200 bg-gray-50">
                  <div className="p-4">
                    <h4 className="font-medium text-gray-900 mb-3">Learning Objectives:</h4>
                    <ul className="list-disc pl-5 space-y-1 text-sm text-gray-600 mb-4">
                      {module.learningObjectives.map((objective, index) => (
                        <li key={index}>{objective}</li>
                      ))}
                    </ul>
                    
                    <h4 className="font-medium text-gray-900 mb-3">Chapters:</h4>
                    <div className="space-y-2">
                      {moduleChapters.map((chapter, index) => (
                        <div 
                          key={chapter.id} 
                          onClick={() => setSelectedChapter(chapter.id)}
                          className="flex items-center p-3 bg-white rounded border hover:shadow-sm transition-shadow cursor-pointer"
                        >
                          <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center text-xs font-medium text-blue-800 mr-3">
                            {index + 1}
                          </div>
                          <div className="flex-1">
                            <span className="text-sm font-medium text-gray-700">{chapter.title}</span>
                            <div className="flex items-center space-x-4 mt-1">
                              <div className="flex items-center space-x-1 text-xs text-gray-500">
                                <Clock className="h-3 w-3" />
                                <span>{chapter.estimatedTime}</span>
                              </div>
                              <span className={`px-1 py-0.5 text-xs rounded ${getDifficultyColor(chapter.difficulty)}`}>
                                {chapter.difficulty}
                              </span>
                            </div>
                          </div>
                          <ChevronRight className="h-4 w-4 text-gray-400" />
                        </div>
                      ))}
                    </div>
                    
                    {module.tags.length > 0 && (
                      <div className="mt-4">
                        <h4 className="font-medium text-gray-900 mb-2">Tags:</h4>
                        <div className="flex flex-wrap gap-1">
                          {module.tags.map((tag, index) => (
                            <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          )
        })}
      </div>

      {filteredModules.length === 0 && (
        <div className="text-center py-8">
          <BookOpen className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <p className="text-gray-500">No modules found matching your criteria.</p>
        </div>
      )}
    </div>
  )
}

export default Notes
